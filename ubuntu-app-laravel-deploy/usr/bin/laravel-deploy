#!/bin/bash

# Laravel Deploy Tool
# Version: 1.0.0
# Author: Laravel Deploy Team

set -euo pipefail

# Configuration
SCRIPT_DIR="/usr/share/laravel-deploy/scripts"
CONFIG_DIR="/etc/laravel-deploy"
TEMPLATE_DIR="/usr/share/laravel-deploy/templates"
LOG_DIR="/var/log/laravel-deploy"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

print_header() {
    echo -e "\n${BLUE}================================${NC}"
    echo -e "${BLUE}   Laravel Deploy Tool${NC}"
    echo -e "${BLUE}================================${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

# Initialize new project
init_project() {
    print_header
    print_success "Initializing Laravel deployment project..."
    
    # Check if we're in a Laravel project
    if [[ ! -f "composer.json" ]]; then
        print_error "Not in a Laravel project directory"
        print_info "Please run this command from your Laravel project root"
        exit 1
    fi
    
    # Copy deployment scripts
    cp "$SCRIPT_DIR/deploy.sh" .
    cp "$SCRIPT_DIR/deploy-non-interactive.sh" .
    cp "$SCRIPT_DIR/deployment-manager.sh" .
    
    # Make executable
    chmod +x deploy.sh deploy-non-interactive.sh deployment-manager.sh
    
    # Create configuration template
    cat > laravel-deploy.yml << 'EOF'
# Laravel Deploy Configuration
project:
  name: "your-laravel-app"
  repository: "git@github.com:your-username/your-project.git"

database:
  type: "local"  # local or external
  name: "laravel"
  user: "sail"
  password: "your-secure-password"

# For external database
# database:
#   type: "external"
#   host: "your-db-host.com"
#   port: "3306"
#   name: "your_database"
#   user: "your_user"
#   password: "your_password"

ssl:
  enabled: true
  domain: "yourdomain.com"
  email: "admin@yourdomain.com"

deployment:
  strategy: "interactive"  # interactive or automated
EOF
    
    print_success "Project initialized successfully!"
    print_info "Next steps:"
    echo "1. Edit laravel-deploy.yml with your configuration"
    echo "2. Run: laravel-deploy deploy"
}

# Deploy project
deploy_project() {
    print_header
    
    if [[ ! -f "laravel-deploy.yml" ]]; then
        print_error "Configuration file not found"
        print_info "Run 'laravel-deploy init' first"
        exit 1
    fi
    
    # Parse configuration
    local strategy=$(grep "strategy:" laravel-deploy.yml | cut -d':' -f2 | tr -d ' ')
    
    if [[ "$strategy" == "automated" ]]; then
        print_success "Starting automated deployment..."
        sudo ./deploy-non-interactive.sh
    else
        print_success "Starting interactive deployment..."
        sudo ./deploy.sh
    fi
}

# Check deployment status
check_status() {
    if [[ -f "deployment-manager.sh" ]]; then
        ./deployment-manager.sh status
    else
        print_error "Deployment manager not found"
        print_info "Run 'laravel-deploy init' first"
    fi
}

# Rollback deployment
rollback_deployment() {
    if [[ -f "deployment-manager.sh" ]]; then
        ./deployment-manager.sh rollback
    else
        print_error "Deployment manager not found"
        print_info "Run 'laravel-deploy init' first"
    fi
}

# Create backup
create_backup() {
    if [[ -f "deployment-manager.sh" ]]; then
        ./deployment-manager.sh backup
    else
        print_error "Deployment manager not found"
        print_info "Run 'laravel-deploy init' first"
    fi
}

# Show help
show_help() {
    print_header
    echo -e "${BLUE}Usage: laravel-deploy [COMMAND]${NC}"
    echo ""
    echo "Commands:"
    echo "  init       Initialize new deployment project"
    echo "  deploy     Deploy Laravel application"
    echo "  status     Check deployment status"
    echo "  rollback   Rollback to previous step"
    echo "  backup     Create backup point"
    echo "  help       Show this help"
    echo ""
    echo "Examples:"
    echo "  laravel-deploy init"
    echo "  laravel-deploy deploy"
    echo "  laravel-deploy status"
    echo ""
    echo "For more information, see:"
    echo "  man laravel-deploy"
}

# Main function
main() {
    case "${1:-help}" in
        "init")
            init_project
            ;;
        "deploy")
            deploy_project
            ;;
        "status")
            check_status
            ;;
        "rollback")
            rollback_deployment
            ;;
        "backup")
            create_backup
            ;;
        "help"|*)
            show_help
            ;;
    esac
}

# Run main function
main "$@"
